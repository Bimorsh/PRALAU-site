const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const passport = require('passport');
const session = require('express-session');
const LocalStrategy = require('passport-local').Strategy;
const fs = require('fs');
const { exec } = require('child_process');
const User = require('./models/User');
const Video = require('./models/Video');

const app = express();

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/videoApp', { useNewUrlParser: true, useUnifiedTopology: true });

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(session({ secret: 'your-secret-key', resave: false, saveUninitialized: true }));
app.use(passport.initialize());
app.use(passport.session());

// Passport Local Strategy
passport.use(new LocalStrategy(
  (username, password, done) => {
    User.findOne({ username: username }, (err, user) => {
      if (err) return done(err);
      if (!user) return done(null, false, { message: 'Incorrect username.' });
      if (!user.validPassword(password)) return done(null, false, { message: 'Incorrect password.' });
      return done(null, user);
    });
  }
));

passport.serializeUser((user, done) => {
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  User.findById(id, (err, user) => {
    done(err, user);
  });
});

// Multer setup for video uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({ storage: storage });

// Routes
app.post('/signup', async (req, res) => {
  const { username, password } = req.body;
  const user = new User({ username, password });
  await user.save();
  res.send('User registered successfully!');
});

app.post('/login', passport.authenticate('local'), (req, res) => {
  res.send('Logged in successfully!');
});

app.post('/upload', upload.single('video'), async (req, res) => {
  const { filename, path } = req.file;
  const userId = req.user._id;

  // Save video metadata to database
  const video = new Video({ filename, path, userId });
  await video.save();

  // Upscale video using FFmpeg
  const upscaledPath = `uploads/upscaled-${filename}`;
  exec(`ffmpeg -i ${path} -vf scale=1280:720 ${upscaledPath}`, (err) => {
    if (err) return res.status (500).send('Error processing video.');
    // Compress video using FFmpeg or HandBrake
    const compressedPath = `uploads/compressed-${filename}`;
    exec(`ffmpeg -i ${upscaledPath} -vcodec libx264 -crf 28 ${compressedPath}`, (err) => {
      if (err) return res.status(500).send('Error compressing video.');
      // Generate subtitles using autosub or pocketsphinx
      exec(`autosub ${compressedPath}`, (err) => {
        if (err) return res.status(500).send('Error generating subtitles.');
        res.send('Video uploaded, upscaled, compressed, and subtitles generated successfully!');
      });
    });
  });
});

app.get('/videos', async (req, res) => {
  const videos = await Video.find({ userId: req.user._id });
  res.json(videos);
});

app.get('/download/:id', async (req, res) => {
  const video = await Video.findById(req.params.id);
  res.download(video.path);
});

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});